#!/sbin/runscript
# Copyright 2013 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
### BEGIN INIT INFO
# Provides:    gce_manage_accounts
# X-Start-Before:    ssh
# Required-Start:    $local_fs $network $named $syslog
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Google Compute Engine accounts manager service
# Description:       This launches the Google Compute Engine accounts manager
#        daemon.
### END INIT INFO

depend ()
{
  before ssh
  need localmount net
  use dns logger
  provide gce_manage_accounts
}

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/lib/rc/bin:/sbin:/usr/sbin:/bin:/usr/bin
description="Google Compute Engine accounts manager service"
NAME=manage_accounts
DAEMON=/usr/share/google/google_daemon/manage_accounts.py
DAEMON_ARGS="--daemon"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/google-manage-accounts

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

#
# Function that starts the daemon/service
#
do_start()
{
  # One-shot run prior to daemonizing.
  $DAEMON --single-pass

  # In case of power outage or hard reboot, ensure that SSH keys have been
  # written to disk before starting the daemon. At this point the other
  # Google-specific startup logic will have already occurred, sometimes
  # including other steps which would be good to write to disk; since syncs are
  # expensive and we don't want to do it twice during boot, just do it once
  # here.
  sync

  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
    $DAEMON_ARGS \
    || return 2
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Wait for children to finish too if this is a daemon that forks
  # and if the daemon is only ever run from this initscript.
  # If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be
  # needed by services started subsequently.  A last resort is to
  # sleep for some time.
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
  [ "$?" = 2 ] && return 2
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
  return 0
}

start()
{
  ebegin "Starting $DESC $NAME"
  do_start
  case "$?" in
    0|1) eend 0 ;;
    2) eend 1 ;;
  esac
}

stop()
{
  ebegin "Stopping $DESC $NAME"
  do_stop
  case "$?" in
    0|1) eend 0 ;;
    2) eend 1 ;;
  esac
}

status_of_proc () 
{ 
  local pidfile daemon name status OPTIND;
  pidfile=;
  OPTIND=1;
  while getopts p: opt; do
    case "$opt" in 
      p)
        pidfile="$OPTARG"
        ;;
    esac;
  done;
  shift $(($OPTIND - 1));
  if [ -n "$pidfile" ]; then
    pidfile="-p $pidfile";
  fi;
  daemon="$1";
  name="$2";
  status="0";
  pidofproc $pidfile $daemon > /dev/null || status="$?";
  if [ "$status" = 0 ]; then
    einfo "$name is running";
    return 0;
  else
    if [ "$status" = 4 ]; then
      eerror "could not access PID file for $name";
      return $status;
    else
      eerror "$name is not running";
      return $status;
    fi;
  fi
}

pidofproc () {
  local pidfile base status specified pid OPTIND
  pidfile=
  specified=

  OPTIND=1
  while getopts p: opt ; do
    case "$opt" in
      p)  pidfile="$OPTARG"
        specified="specified"
        ;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ne 1 ]; then
    echo "$0: invalid arguments" >&2
    return 4
  fi

  base=${1##*/}
  if [ ! "$specified" ]; then
    pidfile="/var/run/$base.pid"
  fi

  if [ -n "${pidfile:-}" -a -r "$pidfile" ]; then
    read pid < "$pidfile"
    if [ -n "${pid:-}" ]; then
      if $(kill -0 "${pid:-}" 2> /dev/null); then
        echo "$pid" || true
        return 0
      elif ps "${pid:-}" >/dev/null 2>&1; then
        echo "$pid" || true
        return 0 # program is running, but not owned by this user
      else
        return 1 # program is dead and /var/run pid file exists
      fi
    fi
  fi
  if [ -n "$specified" ]; then
    if [ -e "$pidfile" -a ! -r "$pidfile" ]; then
      return 4 # pidfile exists, but unreadable, return unknown
    else
      return 3 # pidfile specified, but contains no PID to test
    fi
  fi
  if [ -x /bin/pidof ]; then
    status="0"
    /bin/pidof -o %PPID -x $1 || status="$?"
    if [ "$status" = 1 ]; then
      return 3 # program is not running
    fi
    return 0
  fi
  return 4 # Unable to determine status
}

status ()
{
  status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
}

#reload|force-reload)
#
# If do_reload() is not implemented then leave this commented out
# and leave 'force-reload' as an alias for 'restart'.
#
#log_daemon_msg "Reloading $DESC" "$NAME"
#do_reload
#log_end_msg $?
#;;

restart()
{
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  ebegin "Restarting $DESC $NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) eend 0 ;;
      1) eend 1 ;; # Old process is still running
      *) eend 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    eend 1
    ;;
  esac
}

